<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TTA | Chart: Enrollments Dynamics</title>

    <link rel="shortcut icon" href="/static/images/thumb.png">
        
    <!-- Styles -->
    <link rel="stylesheet" href="/static/css/fonts.css">
    <link rel="stylesheet" href="/static/css/brix-family.css">
        
    <link rel="stylesheet" href="/admin/charts/instructorsActivity.css">
</head>
<body>

    <!-- TOOLS -->
    <% const percFormat =  new Intl.NumberFormat('us-US', { minimumFractionDigits: 1, maximumFractionDigits: 1 }) %>
    <% function formatToPercents(ratio) { return `${percFormat.format(Math.round(ratio * 1000) / 10)}%` } %>

    <header>
        <h1 class="header-title">Chart &bull; <span>Instructors' Activity</span></h1>
        <menu>
            <%- include('../../static/partial/--admin-menu.ejs') %>
        </menu>
    </header>


    <% if(locals.chartData || locals.chartData.length) { %>
        
        <!-- making table form and sorting -->
        <%
            let totalScoringsDone = 0
            const instructorsMatrix = []
            const scoringsMatrix = []

            chartData.forEach(monthData => {
                monthData.instructorIds.forEach((id, index) => {
                    let instFound = false
                    instructorsMatrix.forEach(instructor => {
                        if(instructor.instructorId === id) {
                            instructor.scoringsDoneByInstructor += monthData.scoringsDoneByInstructors[index]
                            instructor.scoringsArray.push(monthData.scoringsDoneByInstructors[index])
                            instFound = true
                        }
                    })
                    if(!instFound) {
                        instructorsMatrix.push({
                            instructorId: id,
                            instructorName: monthData.instructorNames[index],
                            scoringsDoneByInstructor: monthData.scoringsDoneByInstructors[index],
                            scoringsArray: [ monthData.scoringsDoneByInstructors[index] ]
                        })
                    }
                })

                monthData.scoringTypes.forEach((id, index) => {
                    let scoringFound = false
                    scoringsMatrix.forEach(scoring => {
                        if(scoring.scoringId === id) {
                            scoring.scoringsDoneByType += monthData.scoringsDoneByType[index]
                            scoring.scoringsArray.push(monthData.scoringsDoneByType[index])
                            scoringFound = true
                        }
                    })
                    if(!scoringFound) {
                        scoringsMatrix.push({
                            scoringId: id,
                            scoringsDoneByType: monthData.scoringsDoneByType[index],
                            scoringsArray: [ monthData.scoringsDoneByType[index] ]
                        })
                    }
                })

                totalScoringsDone += monthData.scorings
            })


            instructorsMatrix.sort((a, b) => {
                return b.scoringsDoneByInstructor - a.scoringsDoneByInstructor
            })

            scoringsMatrix.sort((a, b) => {
                return b.scoringsDoneByType - a.scoringsDoneByType
            })

        %>

        <!-- Dynamics of scorings done per instructors -->
        <h2 class="table-title -hidden">
            <span>Dynamics of scorings done</span>
            <span class="table-title-type">per instructors</span>
        </h2>

        <section class="table-box" id="per-instructors">
            <!-- first row: TITLE-->
            <div class="table-titles-left"></div>
            <div class="table-titles-right">
                <h2 class="table-title">
                    <span>Dynamics of scorings done</span>
                    <span class="table-title-type">per instructors</span>
                </h2>
            </div>
            <!-- second row: Headers -->
            <div class="table-headers-left">Structure for the period</div>
            <div class="table-headers-right">
                <% chartData.forEach(monthData => { %>
                    <span class="header-month"><%= monthData.month %>.<%= monthData.year %></span>
                <% }) %>
            </div>
            <!-- third row: Totals -->
            <div class="table-totals-left">
                <svg width="10" height="6" viewBox="0 0 10 6" fill="none">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M0 0.5L5 5.5L10 0.5H0Z" fill="#AAAAAA" />
                </svg>
            </div>
            <div class="table-totals-right">
                <% chartData.forEach(monthData => { %>
                    <span class="header-total"><%= monthData.scorings %></span>
                <% }) %>
            </div>
            <!-- forth row: Data -->
            <% instructorsMatrix.forEach((item, index) => { %>                
                <div class="table-row-left">
                    <span class="inst-name"><%= item.instructorName %></span>
                    <span class="inst-ratio" data-index="<%= index %>"><%= Math.round(item.scoringsDoneByInstructor * 1000 / totalScoringsDone) / 10  %>%</span>
                </div>  <!-- table-row-left -->
                <div class="table-row-right">
                    <% item.scoringsArray.forEach(qty => { %>
                        <span class="scoring-qty" data-value="<%= qty %>"><%= qty %></span>
                    <% }) %>
                </div>  <!-- table-row-right -->
            <% }) %>
        </section>      <!-- table-box -->


        <!-- Dynamics of scorings done per types -->
        <h2 class="table-title -hidden">
            <span>Dynamics of scorings done</span>
            <span class="table-title-type">per types</span>
        </h2>

        <section class="table-box" id="per-types">
            <!-- first row: TITLE-->
            <div class="table-titles-left"></div>
            <div class="table-titles-right">
                <h2 class="table-title">
                    <span>Dynamics of scorings done</span>
                    <span class="table-title-type">per types</span>
                </h2>
            </div>
            <!-- second row: Headers -->
            <div class="table-headers-left">Structure for the period</div>
            <div class="table-headers-right">
                <% chartData.forEach(monthData => { %>
                    <span class="header-month"><%= monthData.month %>.<%= monthData.year %></span>
                <% }) %>
            </div>
            <!-- third row: Totals -->
            <div class="table-totals-left">
                <svg width="10" height="6" viewBox="0 0 10 6" fill="none">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M0 0.5L5 5.5L10 0.5H0Z" fill="#AAAAAA" />
                </svg>
            </div>
            <div class="table-totals-right">
                <% chartData.forEach(monthData => { %>
                    <span class="header-total"><%= monthData.scorings %></span>
                <% }) %>
            </div>
            <!-- forth row: Data -->
            <% scoringsMatrix.forEach((item, index) => { %>                
                <div class="table-row-left">
                    <span class="inst-name"><%= item.scoringId %></span>
                    <span class="inst-ratio" data-index="<%= index %>"><%= Math.round(item.scoringsDoneByType * 1000 / totalScoringsDone) / 10  %>%</span>
                </div>  <!-- table-row-left -->
                <div class="table-row-right">
                    <% item.scoringsArray.forEach(qty => { %>
                        <span class="scoring-qty" data-value="<%= qty %>"><%= qty %></span>
                    <% }) %>
                </div>  <!-- table-row-right -->
            <% }) %>
        </section>      <!-- table-box -->
        

    <% } else { %>
        <h1>No data passed</h1>
    <% } %>


    <script defer>

        // @drawing table
        // looking for maximum values in Headers
        const totals = document.querySelectorAll(".table-totals-right")

        if (totals) {
            totals.forEach(tableTotal => {
                let headerTotals = tableTotal.querySelectorAll(".header-total")
                if (headerTotals) {
                    let maxElement = headerTotals[0]
                    let maxValue = parseFloat(headerTotals[0].textContent) || 0
                    headerTotals.forEach(headerTotal => {
                        if (parseFloat(headerTotal.textContent) > maxValue) {
                            maxElement = headerTotal
                            maxValue = parseFloat(headerTotal.textContent)
                        }
                    })
                    maxElement.classList.add("-max-value")
                }
            })
        }


        // looking for maximum values in Data
        const tables = document.querySelectorAll(".table-box")
        if (tables) {
            tables.forEach(table => {
                let qtyOfCols = table.querySelectorAll(".header-total")
                if (qtyOfCols) {
                    const dataSpots = table.querySelectorAll(".scoring-qty")
                    qtyOfCols.forEach((col, index) => {
                        let i = index % qtyOfCols.length
                        let maxElement = dataSpots[i]
                        let maxValue = parseFloat(maxElement.textContent)
                        while (i < dataSpots.length) {
                            if (parseFloat(dataSpots[i].textContent) > maxValue) {
                                maxElement = dataSpots[i]
                                maxValue = parseFloat(maxElement.textContent)
                            }
                            i += qtyOfCols.length
                        }
                        if (maxValue > 0) {
                            maxElement.classList.add("-max-value")
                        }
                    })
                }
            })
        }

        
    </script>

</body>
</html>
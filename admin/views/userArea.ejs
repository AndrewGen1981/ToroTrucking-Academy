<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TTA | User Area</title>

    <link rel="shortcut icon" href="../../static/images/thumb.png">

    <!-- Styles -->
    <link rel="stylesheet" href="../../static/css/fonts.css">
    <link rel="stylesheet" href="../../static/css/brix-family.css">

    <link rel="stylesheet" href="/static/css/colors.css">

    <link rel="stylesheet" href="/admin/views/userArea.css">

</head>
<body>

    <!-- hidden svg -->
    <svg class="-hidden">
        <symbol id='check' viewBox="0 0 512 512">
            <path d="M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 48c110.532 0 200 89.451 200 200 0 110.532-89.451 200-200 200-110.532 0-200-89.451-200-200 0-110.532 89.451-200 200-200m140.204 130.267l-22.536-22.718c-4.667-4.705-12.265-4.736-16.97-.068L215.346 303.697l-59.792-60.277c-4.667-4.705-12.265-4.736-16.97-.069l-22.719 22.536c-4.705 4.667-4.736 12.265-.068 16.971l90.781 91.516c4.667 4.705 12.265 4.736 16.97.068l172.589-171.204c4.704-4.668 4.734-12.266.067-16.971z"></path>
        </symbol>
        <symbol id='uncheck' viewBox="0 0 512 512">
            <path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z"></path>
        </symbol>
    </svg>
    

    <nav>
        <div class="nav-bar">
            <% if(admName && admLocation) { %>
                <section class="nav-text">
                    <h2>user area&bull;<%= admName  %>&bull;<%= admLocation %></h2>
                    <p>Applicants and students related to your location, including users without a location</p>
                </section>
            <% } %>
            <menu>
                <%- include('../../static/partial/--admin-menu.ejs') %>
            </menu>
        </div>
        <header>
            <section class='schema-row' id='schema-headers-users'>
                <!-- HEADERS -->
                <div class='schema-col-index'>#</div>
                <div class='schema-col-name'>User</div>
                <div class='schema-col-email'>Emal</div>
                <div class='schema-col-token'>Verified</div>
                <div class='schema-col-created'>Created</div>
                <div class='schema-col-lastSESS'>last session</div>
                <div class='schema-col-dataCollection'>data collection<br>form</div>
                <div class='schema-col-application'>application<br>form</div>
                <div class='schema-col-agreement'>agreement<br>form</div>
                <div class='schema-col-student'>is student?</div>
            </section>      <!-- schema-row -->
        </header>
    </nav>
    
    <!-- adminProfile is also passed -->

    <div class="schema-users" id="schema-users">
    
        <% function capitalize(str) { return str.toLowerCase().replace(/(?:^|\s|["'([{])+\S/g, match => match.toUpperCase()) } %>

        <% if(users) { %>
            <% users.map((item, index) => { %>
                
                <section class='schema-row' name='schema-row<%= index + 1  %>' id='row-<%= item._id %>'>
                    <div class='schema-col-index' id='index-<%=item._id %>'><%= index + 1 %></div>
                    <a class='schema-col-name' id='name-<%=item._id %>' href='/admin/user/<%= item._id %>'><%= capitalize(item.name) %></a>
                    <div class='schema-col-email' id='email-<%= item._id %>'><%= item.email %></div>
        
                    <% if (item.token === 'not sent') { %>
                        <div class='schema-col-token token-not-sent' id='token-<%= item._id %>'>not sent</div>
                    <% } else { %>
                        <% if (item.token === 'verified') { %>
                            <div class='schema-col-token token-verified' id='token-<%= item._id %>'>trusted</div>
                        <% } else { %>
                            <div class='schema-col-token token-not-confirmed' id='token-<%= item._id %>'>unsafe</div>
                        <% } %>
                    <% } %>
        
                    <div class='schema-col-created' id='created-<%= item._id %>'><%= new Date(item.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) %></div>
                    <div class='schema-col-lastSESS' id='lastSESS-<%= item._id %>'>
                        <span class="last-date"><%= new Date(item.lastSESS).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) %></span>
                        <span class="last-time"><%= new Date(item.lastSESS).toLocaleTimeString('en-US', { timeZone: 'America/Los_Angeles', hour12: false }) %></span>
                    </div>

                    <div class="schema-col-dataCollection" id='dataCollection-<%= item._id %>'>
                        <svg class="-ico">
                            <use xlink:href="<%= item.dataCollection ? '#check' : '#uncheck' %>"></use>
                        </svg>
                    </div>

                    <div class="schema-col-application" id='application-<%= item._id %>'>
                        <svg class="-ico">
                            <use xlink:href="<%= item.application ? '#check' : '#uncheck' %>"></use> 
                        </svg>
                    </div>

                    <div class="schema-col-agreement" id='agreement-<%= item._id %>'>
                        <svg class="-ico">
                            <use xlink:href="<%= item.agreement ? '#check' : '#uncheck' %>"></use> 
                        </svg>
                    </div>

                    <div class="schema-col-student" id='student-<%= item._id %>'>
                        <svg class="-ico">
                            <use xlink:href="<%= item.student ? '#check' : '#uncheck' %>"></use> 
                        </svg>
                    </div>
         
                </section>
    
            <% }) %>
        <% } %>
        
    </div>      <!-- schema-users -->
    <footer>
        <span>2022&bull;</span>
        <a href="http://www.boltcdl.com" target="_blank">Bolt&#169;</a>
    </footer>



    <script type="module">
        // @NOTIFICATIONS from db
        import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js"
        const socket = io("/")
        
        // server emits, so have to check if changes are related to this particular client
        socket.on('users-collection-update', user => {
            if (user) {
                // document.querySelector('#reload-user-area').click()
                const id = user.documentKey._id

                if (user.operationType === "update") {
                    // USER exists in the list
                    const fields = user.updateDescription.updatedFields
                    const updatedRow = document.querySelector(`#row-${id}`)
                    if (updatedRow != null) {
                        if (fields.name || fields.email || fields.created || fields.lastSESS ||
                            fields.dataCollection != undefined || fields.application != undefined || fields.agreement || fields.key > -1) {
                            // conditions acoide animation 'blinking' when toker resent or passw changed
                            updatedRow.classList.add('-hightight-update-row')
                            setTimeout(() => { updatedRow.classList.remove('-hightight-update-row') }, 1500)
                        }

                        if (fields.name) { document.querySelector(`#name-${id}`).textContent = fields.name }
                        if (fields.email) { document.querySelector(`#email-${id}`).textContent = fields.email }
                        if (fields.created) { document.querySelector(`#created-${id}`).textContent = new Date(fields.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) }
                        if (fields.lastSESS) { 
                            document.querySelector(`#lastSESS-${id} .last-date`).textContent = new Date(fields.lastSESS).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' })
                            document.querySelector(`#lastSESS-${id} .last-time`).textContent = new Date(fields.lastSESS).toLocaleTimeString('en-US', { timeZone: 'America/Los_Angeles', hour12: false })
                        }
                        if (fields.token) {
                            const token = document.querySelector(`#token-${id}`)
                            if (fields.token === 'not sent') {
                                token.textContent = "not sent"
                                token.classList.add('token-not-sent')
                                token.classList.remove('token-verified')
                                token.classList.remove('token-not-confirmed')
                            } else {
                                if (fields.token === 'verified') {
                                    token.textContent = "trusted"
                                    token.classList.remove('token-not-sent')
                                    token.classList.add('token-verified')
                                    token.classList.remove('token-not-confirmed')
                                } else {
                                    token.textContent = "unsafe"
                                    token.classList.remove('token-not-sent')
                                    token.classList.remove('token-verified')
                                    token.classList.add('token-not-confirmed')
                                }
                            }
                        }   //  token
                        

                        // update checkmarks
                        function toggleStepCheck(el, ifStatement) {       // service function
                            el.querySelector('use').setAttribute("href", ifStatement ? '#check' : '#uncheck')
                        }

                        if (fields.dataCollection) { toggleStepCheck(document.querySelector(`#dataCollection-${id}`), fields.dataCollection.length) }     // dataCollection
                        if (fields.application) { toggleStepCheck(document.querySelector(`#application-${id}`), fields.application.length) }     // application
                        if (fields.agreement) { toggleStepCheck(document.querySelector(`#agreement-${id}`), fields.agreement.length) }     // agreement
                        if (fields.key > -1) { toggleStepCheck(document.querySelector(`#student-${id}`), fields.key > 0) }     // if student
                        
                    }   // updatedRow != null
                }   // user.operationType === "update"

                if (user.operationType === "delete") {
                    // USER exists in the list & should be deleted
                    const updatedRow = document.querySelector(`#row-${id}`)
                    if (updatedRow != null) {
                        updatedRow.classList.add('-hightight-delete-row')
                        setTimeout(() => { 
                            updatedRow.classList.remove('-hightight-delete-row')
                            updatedRow.remove()
                            // recount #
                            const indexes = document.querySelectorAll('.schema-col-index')
                            for (let i=0; i<indexes.length; i++) { if (i > 0) { indexes[i].textContent = i } }
                        }, 500)
                    }   // updatedRow != null
                }   // user.operationType === "delete"

                if (user.operationType === "insert") {
                    // USER doesn't exist & should be inserted
                    document.location.reload()
                } 
            }   // if user
        })  // socket.on 'users-collection-update'
    </script>

    

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Area</title>

    <link rel="shortcut icon" href="../../static/images/thumb.png">

    <link rel="stylesheet" href="/static/css/colors.css">
    <link rel="stylesheet" href="/admin/views/showSchema.css">

</head>
<body>
    
    <nav>
        <a href="/admin/profile" title="Admin Profile">
            <svg class="ico" viewBox="0 0 122.88 120.26">
                <path d="M47,70.06a19,19,0,0,1-1.66-2c-1.23-1.68-2.37-3.44-3.49-5.21L36.35,54c-2.1-3.1-3.21-5.86-3.21-8.08s1.25-5.12,3.76-5.75a152.65,152.65,0,0,1-.22-15.93,21.05,21.05,0,0,1,.66-3.65A21,21,0,0,1,46.75,8.64,24.2,24.2,0,0,1,51.84,6.2C55.05,5,53.5.12,57,0,65.34-.22,79,6.87,84.26,12.62a20.91,20.91,0,0,1,5.42,13.61l-.33,14.49a4.12,4.12,0,0,1,3,3c.44,1.77,0,4.2-1.55,7.64h0c0,.11-.11.11-.11.22L84.37,62c-1.44,2.36-2.92,4.75-4.58,7-2,2.63-3.59,2.16-1.91,4.68a22,22,0,0,0,8.29,6.66,8.55,8.55,0,0,0-1.19.22h0A7.29,7.29,0,0,0,80.38,84l-2.27,3.93a7.63,7.63,0,0,0-.93,2.77h0a7.61,7.61,0,0,0,.18,2.84l0,.18a7.45,7.45,0,0,0,1.27,2.57l.06.09q-.24.15-.48.33a7.3,7.3,0,0,0-2,2.26,7.39,7.39,0,0,0-.95,2.85,7.93,7.93,0,0,0,.2,2.86h0l1.15,4.37a5.51,5.51,0,0,0,.37,1,7.55,7.55,0,0,0,1,1.73c.1.13.21.25.32.37s.37.38.56.56H0c0-33,35.5-22.55,47.58-39.15,1.39-2.08,1-1.88-.55-3.55Zm74.74,23.68a1.92,1.92,0,0,0-.91-1.2,1.86,1.86,0,0,0-1.48-.18l-2.87.76a14.86,14.86,0,0,0-1.06-1.73,18.15,18.15,0,0,0-1.28-1.59L115.78,87a1.9,1.9,0,0,0-.71-2.65l-3.5-2a1.89,1.89,0,0,0-1.46-.2,1.87,1.87,0,0,0-1.18.91l-1.48,2.55a14.06,14.06,0,0,0-2-.45,15.22,15.22,0,0,0-2-.19l-.87-3.15a1.78,1.78,0,0,0-.87-1.17,1.89,1.89,0,0,0-1.49-.19l-3.87,1a1.9,1.9,0,0,0-1.19.91A1.86,1.86,0,0,0,95,83.88l.77,2.87A13.36,13.36,0,0,0,94,87.81a16.31,16.31,0,0,0-1.6,1.28l-2.79-1.62a1.9,1.9,0,0,0-1.47-.2,1.85,1.85,0,0,0-1.18.92l-2,3.5a1.87,1.87,0,0,0-.19,1.45,1.81,1.81,0,0,0,.9,1.19l2.55,1.48a15.58,15.58,0,0,0-.45,2,15.35,15.35,0,0,0-.2,2l-3.13.83a1.76,1.76,0,0,0-1.18.88,1.9,1.9,0,0,0-.19,1.48l1,3.9a1.91,1.91,0,0,0,.92,1.16,1.88,1.88,0,0,0,1.46.22l2.89-.79a14.86,14.86,0,0,0,1.06,1.73c.4.55.83,1.08,1.28,1.59l-1.61,2.79a1.91,1.91,0,0,0-.21,1.47,1.88,1.88,0,0,0,.92,1.18l3.5,2a2,2,0,0,0,2.65-.71L98.44,115a14.1,14.1,0,0,0,2,.46,17.27,17.27,0,0,0,2,.2l.83,3.13a1.82,1.82,0,0,0,.89,1.19,1.77,1.77,0,0,0,1.47.17l3.91-1a2,2,0,0,0,1.37-2.39l-.79-2.88a14.07,14.07,0,0,0,1.73-1.06,19.77,19.77,0,0,0,1.59-1.28l2.79,1.61a1.92,1.92,0,0,0,2.65-.71l2-3.5a2,2,0,0,0-.71-2.65l-2.55-1.47a17.82,17.82,0,0,0,.44-2,14.25,14.25,0,0,0,.2-2l3.14-.86a1.79,1.79,0,0,0,1.18-.88,1.86,1.86,0,0,0,.19-1.48l-1-3.87Zm-14.86-.29a8,8,0,0,1,2.36,2.08,7.78,7.78,0,0,1,1.55,5.76A8,8,0,0,1,105,108a7.87,7.87,0,0,1-3,.2,8.06,8.06,0,0,1-5.35-3.09,7.79,7.79,0,0,1-1.54-5.75A8,8,0,0,1,98.16,94a7.78,7.78,0,0,1,5.76-1.55,8.09,8.09,0,0,1,3,1Z"/>
            </svg>
        </a>
        <a href="/admin/student/list" title="Student List">
            <svg class="ico" viewBox="0 0 512 512">
                <polygon points="32 192 256 64 480 192 256 320 32 192"/><polyline points="112 240 112 368 256 448 400 368 400 240"/><line x1="480" y1="368" x2="480" y2="192"/><line x1="256" y1="320" x2="256" y2="448" />
            </svg>
        </a>
    </nav>
    

    <%- HTML %>


    <script type="module">
        // @NOTIFICATIONS from db
        import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js"
        const socket = io("/")
        
        // server emits, so have to check if changes are related to this particular client
        socket.on('users-collection-update', user => {
            if (user) {
                // document.querySelector('#reload-user-area').click()
                const id = user.documentKey._id

                if (user.operationType === "update") {
                    // USER exists in the list
                    const fields = user.updateDescription.updatedFields
                    const updatedRow = document.querySelector(`#row-${id}`)
                    if (updatedRow != null) {
                        if (fields.name || fields.email || fields.created || fields.lastSESS ||
                            fields.dataCollection != undefined || fields.application != undefined || fields.agreement || fields.key > -1) {
                            // conditions acoide animation 'blinking' when toker resent or passw changed
                            updatedRow.classList.add('-hightight-update-row')
                            setTimeout(() => { updatedRow.classList.remove('-hightight-update-row') }, 500)
                        }

                        if (fields.name) { document.querySelector(`#name-${id}`).textContent = fields.name }
                        if (fields.email) { document.querySelector(`#email-${id}`).textContent = fields.email }
                        if (fields.created) { document.querySelector(`#created-${id}`).textContent = new Date(fields.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) }
                        if (fields.lastSESS) { document.querySelector(`#lastSESS-${id}`).textContent = `${new Date(fields.lastSESS).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' })} ${new Date(fields.lastSESS).toLocaleTimeString('en-US', { timeZone: 'America/Los_Angeles' })}` }
                        if (fields.token) {
                            const token = document.querySelector(`#token-${id}`)
                            if (fields.token === 'not sent') {
                                token.textContent = "not sent"
                                token.classList.add('token-not-sent')
                                token.classList.remove('token-verified')
                                token.classList.remove('token-not-confirmed')
                                token.classList.remove('-step-done')
                                token.classList.remove('-step-todo')
                            } else {
                                if (fields.token === 'verified') {
                                    token.textContent = "trusted"
                                    token.classList.remove('token-not-sent')
                                    token.classList.add('token-verified')
                                    token.classList.remove('token-not-confirmed')
                                    token.classList.add('-step-done')
                                    token.classList.remove('-step-todo')
                                } else {
                                    token.textContent = "unsafe"
                                    token.classList.remove('token-not-sent')
                                    token.classList.remove('token-verified')
                                    token.classList.add('token-not-confirmed')
                                    token.classList.remove('-step-done')
                                    token.classList.add('-step-todo')
                                }
                            }
                        }   //  token
                        

                        // + and -
                        function toggleStepCheck(form, ifStatement) {       // general service function
                            if (ifStatement) {
                                form.textContent = '+'
                                form.classList.remove('-step-todo')
                                form.classList.add('-step-done')
                            } else {
                                form.textContent = '-'
                                form.classList.remove('-step-done')
                                form.classList.add('-step-todo')
                            }
                        }
                        
                        if (fields.dataCollection != undefined) { toggleStepCheck(document.querySelector(`#form1-step-${id}`), fields.dataCollection.length) }     // dataCollection
                        if (fields.application != undefined) { toggleStepCheck(document.querySelector(`#form2-step-${id}`), fields.application.length) }     // application
                        if (fields.agreement != undefined) { toggleStepCheck(document.querySelector(`#form3-step-${id}`), fields.agreement.length) }     // agreement
                        if (fields.key > -1) { toggleStepCheck(document.querySelector(`#student-step-${id}`), fields.key > 0) }     // if student
                        
                    }   // updatedRow != null
                }   // user.operationType === "update"

                if (user.operationType === "delete") {
                    // USER exists in the list & should be deleted
                    const updatedRow = document.querySelector(`#row-${id}`)
                    if (updatedRow != null) {
                        updatedRow.classList.add('-hightight-delete-row')
                        setTimeout(() => { 
                            updatedRow.classList.remove('-hightight-delete-row')
                            updatedRow.remove()
                            // recount #
                            const indexes = document.querySelectorAll('.schema-col-index')
                            for (let i=0; i<indexes.length; i++) { if (i > 0) { indexes[i].textContent = i } }
                        }, 500)
                    }   // updatedRow != null
                }   // user.operationType === "delete"

                if (user.operationType === "insert") {
                    // USER doesn't exist & should be inserted
                    const fields = user.fullDocument

                    function addField(tag, field, value, href) {
                        const el = document.createElement(tag)
                        el.classList.add(`schema-col-${field}`)
                        el.id = `${field}-${id}`
                        el.innerHTML = value
                        if (href) { el.href = href }
                        return el
                    }   //addField

                    const n = document.getElementsByClassName('schema-row').length

                    const row = document.createElement('section')
                    row.classList.add('schema-row')
                    row.setAttribute("name", `schema-row${n}`)
                    row.id = `row-${id}`

                    row.appendChild(addField('div', 'index', n))        // index
                    row.appendChild(addField('a', 'name', fields.name, `/user/${id}`))       // name
                    row.appendChild(addField('div', 'email', fields.email))     // email

                    function getToken(token) {       
                        if (token === 'not sent') { return `<p class='token-not-sent'>not sent</p>` }
                        if (token === 'verified') { return `<p class='token-verified'>trusted</p>` }
                        return `<p class='token-not-confirmed'>unsafe</p>`
                    }

                    row.appendChild(addField('div', 'token', getToken(fields.token)))      // token
                    row.appendChild(addField('div', 'created', new Date(fields.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' })))     // created
                    row.appendChild(addField('div', 'lastSESS', `${new Date(fields.lastSESS).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' })} ${new Date(fields.lastSESS).toLocaleTimeString('en-US', { timeZone: 'America/Los_Angeles' })}`))     // lastSESS

                    function getStepCheck(check, form) {       // general service function
                        return check 
                        ? `<div class="step -step-done" id="${form}-step-${id}">+</div>`
                        : `<div class="step -step-todo" id="${form}-step-${id}">-</div>` 
                    }
                    
                    row.appendChild(addField('div', 'dataCollection', getStepCheck(fields.dataCollection, 'form1')))      // dataCollection
                    row.appendChild(addField('div', 'application', getStepCheck(fields.application, 'form2')))      // application
                    row.appendChild(addField('div', 'agreement', getStepCheck(fields.agreement, 'form3')))      // agreement
                    row.appendChild(addField('div', 'student', getStepCheck(fields.student, 'student')))      // student

                    document.querySelector('#schema-headers-users').after(row)

                    row.classList.add('-hightight-insert-row')
                    setTimeout(() => { 
                        row.classList.remove('-hightight-insert-row')
                        // recount #
                        const indexes = document.querySelectorAll('.schema-col-index')
                        for (let i=0; i<indexes.length; i++) { if (i > 0) { indexes[i].textContent = i } }
                    }, 500)

                }   // user.operationType === "insert"
            }   // if user
        })  // socket.on 'users-collection-update'
    </script>

</body>
</html>
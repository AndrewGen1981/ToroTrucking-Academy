<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TTA / Schedule an Appointment</title>

    <link rel="shortcut icon" href="/static/images/thumb.png">
        
    <!-- Styles -->
    <link rel="stylesheet" href="../static/css/fonts.css">
    <link rel="stylesheet" href="../static/css/brix-family.css">
        
    <link rel="stylesheet" href="/users/student-schedule.css">
    <link rel="stylesheet" href="../static/css/bolt-copyright.css">

</head>
<body>

    <% if (locals.startDate && locals.spotsArray && locals.scheduledAppointments && locals.blockedArray) { %>

        <%
            const monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
            const year = startDate.getFullYear()
            const month = startDate.getMonth()
            const monday = startDate.getDate()
            const calendarType = schType
            const calendarTitle = calendarTitles[schType]

            function leadingZero(n) { return n < 10 ? `0${n}` : `${n}` }

            function checkIfBusy(spotDate) {
                let result = false
                if (scheduledAppointments.length) {
                    scheduledAppointments = scheduledAppointments.filter(appointment => {
                        if (appointment.appDate == `${spotDate}`) {
                            result = appointment.isItMe 
                            ? { 
                                who: "ME", 
                                scheduleId: appointment.scheduleId, 
                                appointmentId: appointment.appointmentId
                            }
                            : { who: "NOTME" }
                        } else {
                            return appointment
                        }
                    })
                }
                return result
            }
        %>

        <header>
            <h1 class="header-title" data-limit="<%= calendarLimits[schType] %>">Schedule an Appointment</h1>
            <p class="header-description">each student has 4 appointments limit for backing and city driving</p>
            <menu type="toolbar">
                <a class="nav-item -back" href="/user/home">
                    <svg class="back-ico" viewBox="0 0 512 512">
                        <path d="M0 256c0 141.4 114.6 256 256 256s256-114.6 256-256c0-141.4-114.6-256-256-256S0 114.6 0 256zM246.1 129.2C252.1 131.7 256 137.5 256 144v64h96c17.67 0 32 14.33 32 32v32c0 17.67-14.33 32-32 32h-96v64c0 6.469-3.891 12.31-9.875 14.78c-5.984 2.484-12.86 1.109-17.44-3.469l-112-112c-6.248-6.248-6.248-16.38 0-22.62l112-112C233.3 128.1 240.1 126.7 246.1 129.2z"/>
                    </svg>
                    BACK
                </a>
                <% Object.keys(calendarTitles).forEach(key => { %>
                    <% if (schType === key) { %>
                        <a class="nav-item -current" href="/user/schedule?appType=<%= key %>"><%= calendarTitles[key] %></a>
                    <% } else { %>
                        <a class="nav-item" href="/user/schedule?appType=<%= key %>"><%= calendarTitles[key] %></a>
                    <% } %>
                <% }) %>
            </menu>
        </header>


        <section class="student-schedule-box">
            <div class="student-schedule">
                <!-- Day of Week -->
                <span class="calendar-dateOfWeek -header">Day</span>
                <% for(let i=0; i < nDays; i++) { %>
                    <span class="calendar-dateOfWeek"><%= daysOfWeek[i % 7] %></span>
                <% } %>
                <!-- Date, two weeks -->
                <span class="day-date -header">Time / Date</span>
                <% for(let i=0; i < nDays; i++) { %>
                    <% 
                        let date = new Date(Date.UTC(year, month, monday + i, 0, 0, 0))
                        let y = date.getFullYear()
                        let m = monthNames[date.getMonth()]
                        let d = leadingZero(date.getDate())
                        let dateKey = `${y}-${leadingZero(date.getMonth() + 1)}-${d}`
                    %>
                    <span class="day-date" data-date="<%= dateKey %>">
                        <span class="month-date"><%= `${m}.${d}` %></span><span class="year"><%= `.${y}` %></span>
                    </span>
                <% } %>
                <!-- Spot lines -->
                <% spotsArray.forEach((spot, spotIndex) => { %>
                    <span class="calendar-cell -header"><%= spot %></span>
                    <% for(let i=0; i < nDays; i++) { %>
                        <% 
                            let date = new Date(Date.UTC(year, month, monday + i, 0, 0, 0))
                            let y = date.getFullYear()
                            let d = leadingZero(date.getDate())
                            let dateKey = `${y}-${leadingZero(date.getMonth() + 1)}-${d}`
                        %>
                        <% let occupiedBy = checkIfBusy(new Date(`${dateKey}T${spot}:00.000Z`)) %>
                        <% if(occupiedBy.who === "ME") { %>
                            <span class="calendar-cell -occupied -by-you">YOU
                                <div class="tool-bar">
                                    <svg class="delete-btn" viewBox="0 0 512 512"
                                        data-date="<%= dateKey %>"
                                        data-schedule="<%= occupiedBy.scheduleId %>"
                                        data-appointment="<%= occupiedBy.appointmentId %>"
                                        onclick="deleteScheduled(this)">
                                        <path d="M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM175 208.1L222.1 255.1L175 303C165.7 312.4 165.7 327.6 175 336.1C184.4 346.3 199.6 346.3 208.1 336.1L255.1 289.9L303 336.1C312.4 346.3 327.6 346.3 336.1 336.1C346.3 327.6 346.3 312.4 336.1 303L289.9 255.1L336.1 208.1C346.3 199.6 346.3 184.4 336.1 175C327.6 165.7 312.4 165.7 303 175L255.1 222.1L208.1 175C199.6 165.7 184.4 165.7 175 175C165.7 184.4 165.7 199.6 175 208.1V208.1z"/>
                                    </svg>
                                </div>
                            </span>
                        <% } else { %>
                            <% if(occupiedBy.who === "NOTME") { %>
                                <span class="calendar-cell -occupied">
                                    <span class="occupied-text">occupied</span>
                                    <svg class="occupied-svg" viewBox="0 0 448 512">
                                        <path d="M224 256c70.7 0 128-57.31 128-128s-57.3-128-128-128C153.3 0 96 57.31 96 128S153.3 256 224 256zM274.7 304H173.3C77.61 304 0 381.6 0 477.3c0 19.14 15.52 34.67 34.66 34.67h378.7C432.5 512 448 496.5 448 477.3C448 381.6 370.4 304 274.7 304z"/>
                                    </svg>
                                </span>
                            <% } else { %>
                                <% if (blockedArray.includes(`${i % 7}:${spotIndex}`)) { %>
                                    <span class="calendar-cell -closed">
                                        <span class="closed-text">closed</span>
                                        <svg class="closed-svg" viewBox="0 0 448 512">
                                            <path d="M80 192V144C80 64.47 144.5 0 224 0C303.5 0 368 64.47 368 144V192H384C419.3 192 448 220.7 448 256V448C448 483.3 419.3 512 384 512H64C28.65 512 0 483.3 0 448V256C0 220.7 28.65 192 64 192H80zM144 192H304V144C304 99.82 268.2 64 224 64C179.8 64 144 99.82 144 144V192z"/>
                                        </svg>
                                    </span>
                                <% } else { %>
                                    <span class="calendar-cell -empty"
                                        data-date="<%= dateKey %>T<%= spot %>:00.000Z"
                                        data-type="<%= schType %>"
                                        data-transmission="<%= schTransmission %>"
                                        data-location="<%= schLocation %>"
                                        title="add to <%= dateKey %> <%= spot %>"
                                        onclick="addAppointment(this)">
                                        <span class="empty-text">empty</span>
                                        <svg class="empty-svg" viewBox="0 0 512 512">
                                            <path d="M222.7 32.15C227.7 49.08 218.1 66.9 201.1 71.94C121.8 95.55 64 169.1 64 255.1C64 362 149.1 447.1 256 447.1C362 447.1 448 362 448 255.1C448 169.1 390.2 95.55 310.9 71.94C293.9 66.9 284.3 49.08 289.3 32.15C294.4 15.21 312.2 5.562 329.1 10.6C434.9 42.07 512 139.1 512 255.1C512 397.4 397.4 511.1 256 511.1C114.6 511.1 0 397.4 0 255.1C0 139.1 77.15 42.07 182.9 10.6C199.8 5.562 217.6 15.21 222.7 32.15V32.15z"/>
                                        </svg>
                                    </span>
                                <% } %>
                            <% } %>
                        <% } %>
                    <% } %>
                <% }) %>
            </div>          <!-- student-schedule -->

            <div class="limits-box">
                <span class="title">You can schedule <span id="limits-qty">0</span> appointment(s) more</span>
            </div>      <!-- limits-box -->
            
            <!-- hidden window, shows only when something updates -->
            <div class="modal-window-wait -hidden">
                <h3>Please wait</h3>
                <p>working on your request...</p>
                <svg class="wait-svg" viewBox="0 0 512 512">
                    <path d="M256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C201.7 512 151.2 495 109.7 466.1C95.2 455.1 91.64 436 101.8 421.5C111.9 407 131.8 403.5 146.3 413.6C177.4 435.3 215.2 448 256 448C362 448 448 362 448 256C448 149.1 362 64 256 64C202.1 64 155 85.46 120.2 120.2L151 151C166.1 166.1 155.4 192 134.1 192H24C10.75 192 0 181.3 0 168V57.94C0 36.56 25.85 25.85 40.97 40.97L74.98 74.98C121.3 28.69 185.3 0 255.1 0L256 0zM256 128C269.3 128 280 138.7 280 152V246.1L344.1 311C354.3 320.4 354.3 335.6 344.1 344.1C335.6 354.3 320.4 354.3 311 344.1L239 272.1C234.5 268.5 232 262.4 232 256V152C232 138.7 242.7 128 256 128V128z"/>
                </svg>
            </div>      <!-- modal-window-wait -->

        </section>      <!-- student-schedule -->


    <% } else { %>
        <h2 class="error-message">No core data passed...</h2>
    <% } %>


    <div class="bolt-footer">
        © 2022 designed by BOLT
        <a href="https://www.boltcdl.com" target="_blank">
            <svg class='bolt-ico' viewBox="0 0 320 512"><path d="M296 160H180.6l42.6-129.8C227.2 15 215.7 0 200 0H56C44 0 33.8 8.9 32.2 20.8l-32 240C-1.7 275.2 9.5 288 24 288h118.7L96.6 482.5c-3.6 15.2 8 29.5 23.3 29.5 8.4 0 16.4-4.4 20.8-12l176-304c9.3-15.9-2.2-36-20.7-36z"></path></svg>
        </a>
        <a href="mailto:info@boltcdl.com">info@boltcdl.com</a>
        <span class="bolt-tel">+1253.200.4466</span>
    </div>

    
    <script defer>

        // checkIfToday - entry point
        checkIfToday()      // entry point
        recalculateLimits()


        function checkIfToday() {
            const today = new Date()
            const DOW = document.querySelectorAll(".calendar-dateOfWeek")
            const days = document.querySelectorAll(".day-date")
            days.forEach((day, index) => {
                let dayDate = new Date(`${day.dataset.date}T00:00Z`)
                if (!isNaN(today - dayDate)) {
                    let delta = (today - dayDate) / (24*60*60*1000)
                    if (delta > 0 && delta < 1) {
                        day.classList.add("-today")
                        DOW[index].classList.add("-today-DOW")
                    } else {
                        day.classList.remove("-today")
                        DOW[index].classList.remove("-today-DOW")
                    }
                }
            })
        }


        function recalculateLimits() {
            const title = document.querySelector('.header-title')
            const limitsQty = document.querySelector('#limits-qty')
            const occupByMe = document.querySelectorAll('.-occupied.-by-you')

            if (!limitsQty || !occupByMe || !title) { return 0 }

            const more = parseInt(title.dataset.limit) - occupByMe.length
            limitsQty.textContent = more

            return more
        }


        // show wait window
        function showWaitModalWindow() {
            const modal = document.querySelector(".modal-window-wait")
            const waitSvg = document.querySelector(".wait-svg")
            if (modal) {
                waitSvg.classList.add("-rotate")
                modal.classList.remove("-hidden")
            }
        }


        // check dates: appointments cannot be added or deleted in past
        function checkDates(strZDate) {
            const date = new Date(strZDate)
            const today = new Date()
            return today > date
        }


        // DELETE scheduled appointment
        async function deleteScheduled(deleteBtn) {
            if (!deleteBtn) { return }
            if (checkDates(`${deleteBtn.dataset.date}T00:00Z`)) {
                alert('You cannot delete past appointments')
                return
            }
            if (!confirm('This will delete a scheduled for you appointment. Are you sure?')) { return }

            const response = await fetch('/user/schedule', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    scheduleId: deleteBtn.dataset.schedule,
                    appointmentId: deleteBtn.dataset.appointment,
                    action: "DELETE SCHEDULED"
                })
            })
            if (response.status != 200) {
                const res = await response.json()
                return alert(`Error: ${res.issue}`)
            } else {
                showWaitModalWindow()
            }
        }


        // ADD appointment
        async function addAppointment(emptyCell) {
            if (recalculateLimits() < 1) { return }
            if (!emptyCell) { return }
            if (checkDates(emptyCell.dataset.date)) {
                alert('You cannot add appointment for this day')
                return
            }
            if (!confirm('Would you like to add an appointment?')) { return }

            const response = await fetch('/user/schedule', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    appDate: emptyCell.dataset.date,
                    appType: emptyCell.dataset.type,
                    appTransmission: emptyCell.dataset.transmission,
                    appLocation: emptyCell.dataset.location,
                    action: "ADD APPOINTMENT"
                })
            })
            if (response.status != 200) {
                const res = await response.json()
                return alert(`Error: ${res.issue}`)
            } else {
                showWaitModalWindow()
            }
        }


    </script>


    <script type="module" defer>

        // @NOTIFICATIONS from db
        import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js"
        const socket = io("/")


        // server emits, so have to check if changes are related to this particular client
        // @WHEN Students changed
        socket.on('schedule-update', schedule => {
            if (schedule) {
                document.location.reload()
            }
        })

        socket.on('schedule-blocked-update', blockedCell => {
            if (blockedCell) {
                document.location.reload()
            }
        })

    </script>


</body>
</html>
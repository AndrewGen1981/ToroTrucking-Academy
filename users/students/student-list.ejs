<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>TTA | Student List</title>

    <link rel="shortcut icon" href="../../static/images/thumb.png">
    
    <!-- Styles -->
    <link rel="stylesheet" href="../../static/css/fonts.css">
    <link rel="stylesheet" href="../../static/css/brix-family.css">

    <link rel="stylesheet" href="../../static/css/colors.css">

    <link rel="stylesheet" href="/users/students/student-list.css">

</head>
<body>

    <!-- sprite -->
    <svg class='-hidden'>
        <symbol id='deselect' viewBox="0 0 128 128">
            <path d="M114,128H2a2,2,0,0,1-2-2V14a2,2,0,0,1,2-2H114a2,2,0,0,1,2,2V126A2,2,0,0,1,114,128ZM4,124H112V16H4Z"/><path d="M126,118a2,2,0,0,1-2-2V4H12a2,2,0,0,1,0-4H126a2,2,0,0,1,2,2V116A2,2,0,0,1,126,118Z"/>
        </symbol>
        <symbol id='qr' viewBox="0 0 401.994 401.994">
            <path d="M0,401.991h182.724V219.265H0V401.991z M36.542,255.813h109.636v109.352H36.542V255.813z"/><rect x="73.089" y="292.355" width="36.544" height="36.549"/><rect x="292.352" y="365.449" width="36.553" height="36.545"/><rect x="365.442" y="365.449" width="36.552" height="36.545"/><polygon points="365.446,255.813 328.904,255.813 328.904,219.265 219.265,219.265 219.265,401.991 255.813,401.991 255.813,292.355 292.352,292.355 292.352,328.904 401.991,328.904 401.991,219.265 401.991,219.265 365.446,219.265"/><path d="M0,182.728h182.724V0H0V182.728z M36.542,36.542h109.636v109.636H36.542V36.542z"/><rect x="73.089" y="73.089" width="36.544" height="36.547"/><path d="M219.265,0v182.728h182.729V0H219.265z M365.446,146.178H255.813V36.542h109.633V146.178z"/><rect x="292.352" y="73.089" width="36.553" height="36.547"/>
        </symbol>
    </svg>
    


    <div class="student-list-box">
        <% if (students) { %>
            
            <form action="/admin/student/print-bulk-qr" method="POST" id='qrBulkPrintForm'>

                <header class="student-list-header">
                    <div class="button-box">
                        <div class="lighthouse" title='Data update indicator'></div>      <!-- indicates when db updates -->
                        <button type="reset" class='-btn' title='Deselect All'>
                            <svg class="button-ico">
                                <use xlink:href='#deselect'></use>
                            </svg>
                        </button>
                        <button type="submit" class='-btn' title='Print Selected QRs'>
                            <svg class="button-ico">
                                <use xlink:href='#qr'></use>
                            </svg>
                        </button>
                        <a href="/admin/profile" class='-btn' title="Admin Profile">
                            <svg class="button-ico -bigger" viewBox="0 0 122.88 120.26">
                                <path d="M47,70.06a19,19,0,0,1-1.66-2c-1.23-1.68-2.37-3.44-3.49-5.21L36.35,54c-2.1-3.1-3.21-5.86-3.21-8.08s1.25-5.12,3.76-5.75a152.65,152.65,0,0,1-.22-15.93,21.05,21.05,0,0,1,.66-3.65A21,21,0,0,1,46.75,8.64,24.2,24.2,0,0,1,51.84,6.2C55.05,5,53.5.12,57,0,65.34-.22,79,6.87,84.26,12.62a20.91,20.91,0,0,1,5.42,13.61l-.33,14.49a4.12,4.12,0,0,1,3,3c.44,1.77,0,4.2-1.55,7.64h0c0,.11-.11.11-.11.22L84.37,62c-1.44,2.36-2.92,4.75-4.58,7-2,2.63-3.59,2.16-1.91,4.68a22,22,0,0,0,8.29,6.66,8.55,8.55,0,0,0-1.19.22h0A7.29,7.29,0,0,0,80.38,84l-2.27,3.93a7.63,7.63,0,0,0-.93,2.77h0a7.61,7.61,0,0,0,.18,2.84l0,.18a7.45,7.45,0,0,0,1.27,2.57l.06.09q-.24.15-.48.33a7.3,7.3,0,0,0-2,2.26,7.39,7.39,0,0,0-.95,2.85,7.93,7.93,0,0,0,.2,2.86h0l1.15,4.37a5.51,5.51,0,0,0,.37,1,7.55,7.55,0,0,0,1,1.73c.1.13.21.25.32.37s.37.38.56.56H0c0-33,35.5-22.55,47.58-39.15,1.39-2.08,1-1.88-.55-3.55Zm74.74,23.68a1.92,1.92,0,0,0-.91-1.2,1.86,1.86,0,0,0-1.48-.18l-2.87.76a14.86,14.86,0,0,0-1.06-1.73,18.15,18.15,0,0,0-1.28-1.59L115.78,87a1.9,1.9,0,0,0-.71-2.65l-3.5-2a1.89,1.89,0,0,0-1.46-.2,1.87,1.87,0,0,0-1.18.91l-1.48,2.55a14.06,14.06,0,0,0-2-.45,15.22,15.22,0,0,0-2-.19l-.87-3.15a1.78,1.78,0,0,0-.87-1.17,1.89,1.89,0,0,0-1.49-.19l-3.87,1a1.9,1.9,0,0,0-1.19.91A1.86,1.86,0,0,0,95,83.88l.77,2.87A13.36,13.36,0,0,0,94,87.81a16.31,16.31,0,0,0-1.6,1.28l-2.79-1.62a1.9,1.9,0,0,0-1.47-.2,1.85,1.85,0,0,0-1.18.92l-2,3.5a1.87,1.87,0,0,0-.19,1.45,1.81,1.81,0,0,0,.9,1.19l2.55,1.48a15.58,15.58,0,0,0-.45,2,15.35,15.35,0,0,0-.2,2l-3.13.83a1.76,1.76,0,0,0-1.18.88,1.9,1.9,0,0,0-.19,1.48l1,3.9a1.91,1.91,0,0,0,.92,1.16,1.88,1.88,0,0,0,1.46.22l2.89-.79a14.86,14.86,0,0,0,1.06,1.73c.4.55.83,1.08,1.28,1.59l-1.61,2.79a1.91,1.91,0,0,0-.21,1.47,1.88,1.88,0,0,0,.92,1.18l3.5,2a2,2,0,0,0,2.65-.71L98.44,115a14.1,14.1,0,0,0,2,.46,17.27,17.27,0,0,0,2,.2l.83,3.13a1.82,1.82,0,0,0,.89,1.19,1.77,1.77,0,0,0,1.47.17l3.91-1a2,2,0,0,0,1.37-2.39l-.79-2.88a14.07,14.07,0,0,0,1.73-1.06,19.77,19.77,0,0,0,1.59-1.28l2.79,1.61a1.92,1.92,0,0,0,2.65-.71l2-3.5a2,2,0,0,0-.71-2.65l-2.55-1.47a17.82,17.82,0,0,0,.44-2,14.25,14.25,0,0,0,.2-2l3.14-.86a1.79,1.79,0,0,0,1.18-.88,1.86,1.86,0,0,0,.19-1.48l-1-3.87Zm-14.86-.29a8,8,0,0,1,2.36,2.08,7.78,7.78,0,0,1,1.55,5.76A8,8,0,0,1,105,108a7.87,7.87,0,0,1-3,.2,8.06,8.06,0,0,1-5.35-3.09,7.79,7.79,0,0,1-1.54-5.75A8,8,0,0,1,98.16,94a7.78,7.78,0,0,1,5.76-1.55,8.09,8.09,0,0,1,3,1Z"/>
                            </svg>
                        </a>
                        <a href="/admin/user-area" class='-btn' title="Users Area">
                            <svg class="button-ico -bigger" viewBox="0 0 122.88 79.13">
                                <path d="M72.74,51.34A11.29,11.29,0,0,1,67.43,48c3.55-1.34,5.2-4.93,5.42-11.22.17-4.68-.79-8.2.8-12.81C76.8,14.82,88.48,11.7,95,17.05c5.1-.55,10.24,2.08,11.35,10,.82,5.86-.93,11,.92,16.4a8.41,8.41,0,0,0,4.35,5.15,12.65,12.65,0,0,1-5.81,2.8,59.57,59.57,0,0,1-9.17,1v2.76l3.19,5.1-10.3,8.07-10.3-8,2.29-4.9v-3a39.86,39.86,0,0,1-8.76-1.1ZM29,53.86a7.58,7.58,0,0,1,.79-2.76c-2.26-2-4-4-4.42-8.19h-.24a3.35,3.35,0,0,1-1.6-.42,4.34,4.34,0,0,1-1.76-2.14c-.82-1.87-1.46-6.78.59-8.18L22,31.92l0-.55c-.08-1-.1-2.18-.12-3.44-.07-4.61-.17-10.2-3.88-11.33l-1.59-.48,1.05-1.29a60.37,60.37,0,0,1,9.29-9.44C30.23,2.58,33.87.7,37.42.16A13,13,0,0,1,47.89,3.09,20.24,20.24,0,0,1,50.7,5.91a11.86,11.86,0,0,1,8.37,4.9,17,17,0,0,1,2.73,5.5,18.78,18.78,0,0,1,.73,6.24,15,15,0,0,1-4.34,10.12,3.11,3.11,0,0,1,1.35.35c1.55.83,1.6,2.62,1.19,4.13-.4,1.26-.91,2.73-1.39,4-.59,1.66-1.44,2-3.1,1.79-.08,4.1-2,6.11-4.53,8.52l.58,2c-1.61,7.8-18.69,8.65-23.31.43ZM0,79.13C1.62,58.19,5.56,66,23.42,54.86c4.93,12.8,28.6,13.65,33.79,0,15.42,9.85,23.11,2.41,23,24.27ZM105.69,64.61c-1.69-3.4-2.27-4.71-4.76-7.42,4.7,1.83,8.71,2.06,12.27,4.29,2.27,1.42,5.63,2.49,6.55,4.21,2.26,4.23,1.92,8.94,3.13,13.44H86.26a70.42,70.42,0,0,0-.41-8.56l3.39,2.71,11.55-8.79,4.9.12ZM77.93,57.26l.17-.07L78,57.3l-.08,0Z"/>
                            </svg>
                        </a>
                        <a href="/admin/student" class='-btn' title="INs">
                            <svg class="button-ico -bigger" viewBox="0 0 512 512">
                                <polygon points="32 192 256 64 480 192 256 320 32 192"/><polyline points="112 240 112 368 256 448 400 368 400 240"/><line x1="480" y1="368" x2="480" y2="192"/><line x1="256" y1="320" x2="256" y2="448" />
                            </svg>
                        </a>
                    </div>
                </header>

                <!-- draw column titles -->
                <div class="student-list-row" id="fixed-headers-row">
                    <div class='field -lastName -header -left-color-group -fixed1'>Last Name</div>
                    <div class='field -firstName -header -left-color-group -fixed2'>First Name</div>
                    <div class='field -middleName -header -left-color-group'>Middle</div>
                    <div class='field -key -header -left-color-group -fixed3'>Key</div>
                    <div class='field -qr -header -left-color-group'>Need QR?</div>
                    <div class='field -TTT -header -left-color-group -fixed4'>TTT</div>

                    <div class='field -status -header -left-color-group'>Status</div>

                    <div class='field -email -header -left-color-group'>Email</div>
                    <div class='field -email-verified -header -left-color-group'>Verified</div>
                    
                    <div class='field -street -header -dataCol-color-group'>Street</div>
                    <div class='field -city -header -dataCol-color-group'>City</div>
                    <div class='field -state -header -dataCol-color-group'>State</div>
                    <div class='field -zip -header -dataCol-color-group'>Zip</div>
                    <div class='field -phone -header -dataCol-color-group'>Phone</div>

                    <div class='field -DOB -header -dataCol-color-group'>DOB</div>
                    <div class='field -SSN -header -dataCol-color-group'>SSN</div>

                    <div class='field -class -header -agr-color-group'>Class</div>
                    <div class='field -transmission -header -agr-color-group'>Transmission</div>
                    <div class='field -visiting -header -agr-color-group'>Visiting</div>

                    <div class='field -tuitionCost -header -cost-color-group'>Cost Of<br>Tuition, $</div>
                    <div class='field -regisrFee -header -cost-color-group'>Regisration Fee, $</div>
                    <div class='field -supplyFee -header -cost-color-group'>Supply & Material Fee, $</div>
                    <div class='field -otherFee -header -cost-color-group'>Other<br>Fees, $</div>
                    <div class='field -totalCost -header -cost-color-group'>Total<br>Cost, $</div>
                    
                    <div class='field -payment -header -cost-color-group'>Declared Payment Type</div>
                    <div class='field -thirdPartyList -header -cost-color-group'>3rd Party Payeer</div>
                    
                    <div class='field -created -header -sign-color-group'>Student Since</div>
                    <div class='field -schoolSignRep -header -sign-color-group'>Agreement Signed by</div>
                    <div class='field -schoolSignDate -header -sign-color-group'>Date of Sign</div>
                    <div class='field -updatedAdmin -header -sign-color-group'>Agreement Updated by</div>
                    <div class='field -updatedDate -header -sign-color-group'>Date of Update</div>
                </div>  <!-- student-list-row -->

                <% students.map((student, index) => { %>    <!-- main showing loop -->

                    <!-- dataset for all db changes (student, dataCol, agr) -->
                    <div class="student-list-row" id='student-row-<%= index %>' data-student='<%= student._id %>' data-dataColl='<%= student.user.dataCollection._id %>' data-agreement='<%= student.user.agreement._id %>'>

                        <a href='/admin/user/<%= student.user._id %>' class='field -lastName -fixed1'><%= student.user.dataCollection.lastName %></a>
                        <div class='field -firstName -fixed2'><%= student.user.dataCollection.firstName %></div>
                        <div class='field -middleName'><%= student.user.dataCollection.middleName %></div>

                        <div class='field -key -fixed3'><%= student.key %></div>

                        <!-- form elements to be passed to QRs bulk print -->
                            <label class='field -qr'>
                                <input class='qr-check' type="checkbox" name='qrsToPrint' data-ids='<%= student._id %>' value='<%= student._id %>' onchange="toggleTheRestToo(this)" />
                                <input class='-hidden' type="checkbox" name='qrsNamesToPrint' data-id='<%= student._id %>' value="<%= student.user.dataCollection.firstName %> <%= student.user.dataCollection.lastName %>" />
                                <input class='-hidden' type="checkbox" name='qrsKeysToPrint' data-id='<%= student._id %>' value="<%= student.key %>" />
                                <input class='-hidden' type="checkbox" name='qrsClassesToPrint' data-id='<%= student._id %>' value="<%= student.user.agreement.class %>" />
                            </label>
                        <!-- form elements to be passed to QRs bulk print -->
                        
                        <div class='field -TTT -fixed4'><%= Math.trunc(student.TTT) %>h:<%= Math.round(60*(student.TTT % 1)) %>m</div>

                        <div class='field -status -status-<%= student.status %>'><%= student.status === 'unblock' ? 'active' : student.status %></div>

                        <div class='field -email'><%= student.email %></div>
                        <% let ifVerified = student.user.token === 'verified' ? '-email-trusted' : '-email-unsafe' %>
                        <div class='field -email-verified <%= ifVerified %>'><%= student.user.token %></div>

                        <div class='field -street'><%= student.user.dataCollection.street %></div>
                        <div class='field -city'><%= student.user.dataCollection.city %></div>
                        <div class='field -state'><%= student.user.dataCollection.state %></div>
                        <div class='field -zip'><%= student.user.dataCollection.zip %></div>

                        <div class='field -phone'><%= student.user.dataCollection.phone %></div>

                        <% function formatDate(textDate) { return textDate ? new Date(textDate).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-' } %>

                        <div class='field -DOB'><%= formatDate(student.user.dataCollection.DOB) %></div>
                        <div class='field -SSN'><%= student.user.dataCollection.SSN %></div>

                        <div class='field -class'><%= student.user.agreement.class %></div>
                        <div class='field -transmission'><%= student.user.agreement.transmission %></div>
                        <div class='field -visiting'><%= student.user.agreement.visiting %></div>
                        
                        <% const usNumberFormat =  new Intl.NumberFormat('us-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>

                        <div class='field -tuitionCost' data-amount='<%= student.user.agreement.tuitionCost %>'><%= usNumberFormat.format(student.user.agreement.tuitionCost) %></div>
                        <div class='field -regisrFee' data-amount='<%= student.user.agreement.regisrFee %>'><%= usNumberFormat.format(student.user.agreement.regisrFee) %></div>
                        <div class='field -supplyFee' data-amount='<%= student.user.agreement.supplyFee %>'><%= usNumberFormat.format(student.user.agreement.supplyFee) %></div>
                        <div class='field -otherFee' data-amount='<%= student.user.agreement.otherFee %>'><%= usNumberFormat.format(student.user.agreement.otherFee) %></div>

                        <% let total = parseFloat(student.user.agreement.tuitionCost) %>
                        <% total += parseFloat(student.user.agreement.regisrFee) %>
                        <% total += parseFloat(student.user.agreement.supplyFee) %>
                        <% total += parseFloat(student.user.agreement.otherFee) %>

                        <div class='field -totalCost'><%= usNumberFormat.format(total) %></div>
                        
                        <div class='field -payment'><%= student.user.agreement.payment %></div>
                        <div class='field -thirdPartyList'><%= student.user.agreement.thirdPartyList %></div>
                        
                        <div class='field -created'><%= formatDate(student.created) %></div>
                        <div class='field -schoolSignRep'><%= student.user.agreement.schoolSignRep %></div>
                        <div class='field -schoolSignDate'><%= formatDate(student.user.agreement.schoolSignDate) %></div>
                        <div class='field -updatedAdmin'><%= student.user.agreement.updatedAdmin %></div>
                        <div class='field -updatedDate'><%= formatDate(student.user.agreement.updatedDate) %></div>
                    </div>  <!-- student-list-row -->
                <% }) %>

            </form>     <!-- bulk qr printing form -->

        <% } else { %>      <!-- students array is not OK -->
            <h1>Cannot retrieve data from database...</h1>
        <% } %>
    </div>      <!-- student-list-box -->




    <script>

        const usNumberFormat =  new Intl.NumberFormat('us-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })


        function toggleTheRestToo(qr) {
            // checks/unchecks also all fields needed for QR bulk printing
            const buddies = document.querySelectorAll(`[data-id='${qr.dataset.ids}']`)
            for (let i=0; i < buddies.length; i++) {
                buddies[i].checked = qr.checked
            }
        }


        document.getElementById('qrBulkPrintForm').addEventListener('submit', (e) => {
            // checks if at least one selected to be printed
            const chks = document.getElementsByName('qrsToPrint')
            let flagNoOneChecked = true
            
            for (let i=0; i < chks.length; i++) {
                if (chks[i].checked) {
                    flagNoOneChecked = false
                    break
                }
            }

            if (flagNoOneChecked) {
                e.preventDefault()
                alert('This button for QRs bulk printing. To use select at least one and try again.')
            }
        })


        // toggles fixed headers to change color when position 'sticky' works
        // array of fixed elements
        const fixedHeaders = [
           document.getElementsByClassName('-fixed1')[0],
           document.getElementsByClassName('-fixed2')[0],
           document.getElementsByClassName('-fixed3')[0],
           document.getElementsByClassName('-fixed4')[0]
        ]
    
        // listener on SCROLL adds/removes class 'isSticky'
        window.addEventListener('scroll', (e) => {
            if(fixedHeaders[2].getBoundingClientRect().left < 290) {
                fixedHeaders.map(fixed => { fixed.classList.add('isSticky') })
            } else {
                fixedHeaders.map(fixed => { fixed.classList.remove('isSticky') })
            }
        })



        function reCalcTotal(id) {
            const updatedRow = document.querySelector(`[data-agreement='${id}']`)
            const costItems = ['-tuitionCost', '-regisrFee', '-supplyFee', '-otherFee']
            
            let result = 0
            if (updatedRow) {
                costItems.map(item => {
                    result += parseFloat(updatedRow.getElementsByClassName(item)[0].dataset.amount)
                })
            }
            return usNumberFormat.format(result)
        }

    </script>


    <script type="module" defer>

        // @NOTIFICATIONS from db
        import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js"
        const socket = io("/")

        // indicator to react when db updates
        const lighthouse = document.getElementsByClassName('lighthouse')[0]
        function indicateChanges() {
            lighthouse.classList.add('-jump')
            setTimeout(()=>{
                lighthouse.classList.remove('-jump')
            }, 2500)
        }


        // server emits, so have to check if changes are related to this particular client
        // @WHEN Students changed
        socket.on('students-update', student => {
            if (student) {
                const id = student.documentKey._id
                if (student.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-student='${id}']`)
                    if (updatedRow != null) {
                        const fields = student.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'TTT':
                                        el.textContent = `${Math.trunc(value)}h:${Math.round(60*(value % 1))}m`
                                    break
                                    case 'created':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break
                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if student is defined
        })  // socket.on('students-update')


        // @WHEN dataCollection Forms changed
        socket.on('dataCollections-update', data => {
            if (data) {
                const id = data.documentKey._id
                if (data.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-dataColl='${id}']`)
                    if (updatedRow != null) {
                        const fields = data.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'DOB':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break
                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if data is defined
        })  // socket.on('dataCollections-update')


        // @WHEN dataCollection Forms changed
        socket.on('agreements-update', data => {
            if (data) {
                const id = data.documentKey._id
                if (data.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-agreement='${id}']`)
                    if (updatedRow != null) {
                        const fields = data.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'downPayment':
                                    case 'monthlyPayment':
                                    case 'loanPayment':
                                        el.textContent = usNumberFormat.format(value)
                                    break
                                    
                                    case 'tuitionCost':
                                    case 'regisrFee':
                                    case 'supplyFee':
                                    case 'otherFee':
                                        el.textContent = usNumberFormat.format(value)
                                        el.dataset.amount = value
                                        updatedRow.getElementsByClassName(`-totalCost`)[0].textContent = reCalcTotal(id)
                                    break

                                    case 'updatedDate':
                                    case 'schoolSignDate':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break

                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if data is defined
        })  // socket.on('dataCollections-update')

    </script>

</body>
</html>
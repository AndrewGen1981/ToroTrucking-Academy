<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>TTA | Student List</title>

    <link rel="shortcut icon" href="../../static/images/thumb.png">
    
    <!-- Styles -->
    <link rel="stylesheet" href="../../static/css/fonts.css">
    <link rel="stylesheet" href="../../static/css/brix-family.css">

    <link rel="stylesheet" href="../../static/css/colors.css">

    <link rel="stylesheet" href="/users/students/student-list.css">

</head>
<body>

    <% function formatDate(textDate) { return textDate ? new Date(textDate).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-' } %>
    <% const usNumberFormat =  new Intl.NumberFormat('us-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>

    <div class="student-list-box">
        <% if (students) { %>
            
            <form action="/admin/student/print-bulk-qr" method="POST" id='qrBulkPrintForm'>

                <header class="student-list-header">
                    <div class="button-box">
                        
                        <div class="lighthouse" title='Data update indicator'></div>      <!-- indicates when db updates -->

                        <button type="reset" class='-btn' title='Deselect All'>
                            <i class="far fa-square"></i>
                        </button>
                        <button type="submit" class='-btn' title='Print Selected QRs'>
                            <i class="fas fa-qrcode"></i>
                        </button>
                        <a class='-btn' href="/admin/profile/" title='HOME'>
                            <i class="fas fa-home"></i>
                        </a>
                        <a class='-btn' href="/admin/user-area" title='Users Area'>
                            <i class="fas fa-users"></i>
                        </a>
                        <a class='-btn' href="/admin/student/" title='INs'>
                            <i class="fas fa-feather"></i>
                        </a>
                        <a class='-btn' href="/admin/student/list" title='Reload Student List'>
                            <i class="fas fa-sync-alt"></i>
                        </a>
                        <input type="search" id="search-bar" placeholder="search" oninput="filterColumn(this)">

                        <% if(locals.locations && locals.adminProfile) { %>
                            <% if(Object.keys(locations).length) { %>
                                <select id="locationSelect" onchange="reloadStudentListWithQuery(locationSelect, enrollmentStatusSelect, reloadWithQuery)">
                                    <% Object.values(locations).map(value => { %>
                                        <% if(value === locals.shownLocation) { %>
                                            <option value="<%= value %>" selected><%= value %></option>
                                        <% } else { %>
                                            <option value="<%= value %>"><%= value %></option>
                                        <% } %>
                                    <% }) %>
                                </select>
                                <a href="#" id="reloadWithQuery" class="-hidden"></a>
                            <% } %>
                        <% } %>

                        <!-- Enrollment Status -->
                        <% if(locals.enrollmentStatuses && locals.shownEnrollmentStatus) { %>
                            <select id="enrollmentStatusSelect" onchange="reloadStudentListWithQuery(locationSelect, enrollmentStatusSelect, reloadWithQuery)">
                                <% enrollmentStatuses.map(enrollmentStatus => { %>
                                    <% if(enrollmentStatus.key === shownEnrollmentStatus) { %>
                                        <option value="<%= enrollmentStatus.key %>" selected><%= enrollmentStatus.value %></option>
                                    <% } else { %>
                                        <option value="<%= enrollmentStatus.key %>"><%= enrollmentStatus.value %></option>
                                    <% } %>
                                <% }) %>
                            </select>
                        <% } %>

                    </div>
                    <div class="admin-box">
                        <% if(locals.adminProfile) { %>
                            <p class="welcome-admin">Welcome <%= adminProfile.name %><span>"<%= adminProfile.location %>"</span></p>
                        <% } %>
                    </div>
                </header>

                <!-- draw column titles -->
                <div class="student-list-row" id="fixed-headers-row">
                    <div class='field -lastName -header -left-color-group -fixed1'>Last Name</div>
                    <div class='field -firstName -header -left-color-group -fixed2'>First Name</div>
                    <div class='field -middleName -header -left-color-group'>Middle</div>
                    <div class='field -key -header -left-color-group -fixed3'>Key</div>
                    <div class='field -location -header -left-color-group'>Location</div>
                    <div class='field -qr -header -left-color-group'>Need QR?</div>
                    <div class='field -TTT -header -left-color-group -fixed4'>TTT<br>(hours)</div>

                    <div class='field -balance -header -left-color-group -fixed5'>Balance</div>

                    <div class='field -status -header -left-color-group'>Status</div>

                    <div class='field -class -header -agr-color-group'>Class</div>
                    <div class='field -transmission -header -agr-color-group'>Transmission</div>
                    <div class='field -visiting -header -agr-color-group'>Visiting</div>

                    <div class='field -tuitionCost -header -cost-color-group'>Cost Of<br>Tuition, $</div>
                    <div class='field -regisrFee -header -cost-color-group'>Regist.<br>Fee, $</div>
                    <div class='field -supplyFee -header -cost-color-group' title="Supply & Material Fee">SnM<br>Fee, $</div>
                    <div class='field -otherFee -header -cost-color-group'>Other<br>Fees, $</div>
                    <div class='field -totalCost -header -cost-color-group'>Total<br>Cost, $</div>
                    
                    <div class='field -payment -header -cost-color-group'>Declared Payment Type</div>
                    <div class='field -thirdPartyList -header -cost-color-group'>3rd Party Payeer</div>
                    
                    <div class='field -created -header -sign-color-group'>Student Since</div>
                    <div class='field -schoolSignRep -header -sign-color-group'>Agreement Signed by</div>

                    <div class='field -tuition -header -learn-color-group'>Learning</div>

                    <div class='field -isAllowed -header -scoring-color-group'>Can Do Scorings?</div>
                    <div class='field -scoring -header -scoring-color-group'>IN-CAB Scoring</div>
                    <div class='field -scoring -header -scoring-color-group'>OUT-CAB Scoring</div>
                    <div class='field -scoring -header -scoring-color-group'>Backing Scoring</div>
                    <div class='field -scoring -header -scoring-color-group'>City Scoring</div>

                </div>  <!-- student-list-row -->

                <section class="student-list-body">
                    <% students.map((student, index) => { %>    <!-- main showing loop -->
    
                        <!-- dataset for all db changes (student, dataCol, agr) -->
                        <div class="student-list-row" id='student-row-<%= index %>' data-student='<%= student._id %>' data-dataColl='<%= student.user.dataCollection._id %>' data-agreement='<%= student.user.agreement._id %>' data-tuition='<%= student.tuition._id %>' data-scoring='<%= student.scoring ? student.scoring._id : "n/a" %>'>
    
                            <a href='/admin/user/<%= student.user._id %>' class='field -lastName -fixed1'><%= student.user.dataCollection.lastName %></a>
                            <div class='field -firstName -fixed2'><%= student.user.dataCollection.firstName %></div>
                            <div class='field -middleName'><%= student.user.dataCollection.middleName %></div>
    
                            <div class='field -key -fixed3'><%= student.key %></div>
    
                            <% if(student.location === 'UNSET') { %>
                                <div class='field -location -unset-location'><%= student.location %></div>
                            <% } else { %>
                                <div class='field -location'><%= student.location %></div>
                            <% } %>
    
                            <!-- form elements to be passed to QRs bulk print -->
                                <label class='field -qr'>
                                    <input class='qr-check' type="checkbox" name='qrsToPrint' data-ids='<%= student._id %>' value='<%= student._id %>' onchange="toggleTheRestToo(this)" />
                                    <input class='-hidden' type="checkbox" name='qrsNamesToPrint' data-id='<%= student._id %>' value="<%= student.user.dataCollection.firstName %> <%= student.user.dataCollection.lastName %>" />
                                    <input class='-hidden' type="checkbox" name='qrsKeysToPrint' data-id='<%= student._id %>' value="<%= student.key %>" />
                                    <input class='-hidden' type="checkbox" name='qrsClassesToPrint' data-id='<%= student._id %>' value="<%= student.user.agreement.class %>" />
                                </label>
                            <!-- form elements to be passed to QRs bulk print -->
                            
                            <div class='field -TTT -fixed4'><%= Math.round(student.TTT) %></div>
    
                            <!-- calculating total cost -->
                            <% let tuitionCost = parseFloat(student.user.agreement.tuitionCost) %>
                            <% let regisrFee = parseFloat(student.user.agreement.regisrFee) %>
                            <% let supplyFee = parseFloat(student.user.agreement.supplyFee) %>
                            <% let otherFee = parseFloat(student.user.agreement.otherFee) %>
                            <% let totalCost = tuitionCost + regisrFee + supplyFee + otherFee %>
                            <!-- calculating payments -->
                            <% let paid = 0 %>
                            <% if(student.user.payments) { student.user.payments.map(pmt => { if(pmt.ammount > 0){ paid += pmt.ammount}  }) } %>
                            <!-- calculating balance -->
                            <% let balance = paid - totalCost %>
                            <% let balanceMsg = usNumberFormat.format(balance) %>
                            <!-- perc for gradient  -->
                            <% let perc = Math.round(paid * 100 / totalCost)%>
                            <!-- link for get into payments directly -->
                            <% let pmtLink = `/admin/user/${student.user._id}?activatetab=3&open=payments` %>
    
                            <% if(balance < 0) { %>
                                <a href='<%= pmtLink %>' class='field -balance -fixed5 balance-student-owe' style="--perc:<%= perc %>%;"><%= balanceMsg %></a>
                            <% } else { %>
                                <% if(balance < 0.05) { %>    <!-- from 0.00$ to less than 0.05$ -->
                                    <a href='<%= pmtLink %>' class='field -balance -fixed5 balance-zero'><%= balanceMsg %></a>
                                <% } else { %>
                                    <a href='<%= pmtLink %>' class='field -balance -fixed5 balance-company-owe'><%= balanceMsg %></a>
                                <% } %>
                            <% } %>
    
                            <div class='field -status -status-<%= student.status %>'><%= student.status === 'unblock' ? 'active' : student.status %></div>
    
                            <div class='field -class'><%= student.user.agreement.class %></div>
                            <div class='field -transmission'><%= student.user.agreement.transmission.replace(' Transmission', '') %></div>
                            <div class='field -visiting'><%= student.user.agreement.visiting.replace('at least ', '').replace(' per day', '') %></div>
                            
    
                            <div class='field -tuitionCost' data-amount='<%= student.user.agreement.tuitionCost %>'><%= usNumberFormat.format(student.user.agreement.tuitionCost) %></div>
                            <div class='field -regisrFee' data-amount='<%= student.user.agreement.regisrFee %>'><%= usNumberFormat.format(student.user.agreement.regisrFee) %></div>
                            <div class='field -supplyFee' data-amount='<%= student.user.agreement.supplyFee %>'><%= usNumberFormat.format(student.user.agreement.supplyFee) %></div>
                            <div class='field -otherFee' data-amount='<%= student.user.agreement.otherFee %>'><%= usNumberFormat.format(student.user.agreement.otherFee) %></div>
    
                            <% let total = parseFloat(student.user.agreement.tuitionCost) %>
                            <% total += parseFloat(student.user.agreement.regisrFee) %>
                            <% total += parseFloat(student.user.agreement.supplyFee) %>
                            <% total += parseFloat(student.user.agreement.otherFee) %>
    
                            <div class='field -totalCost' data-amount="<%= total %>"><%= usNumberFormat.format(total) %></div>
                            
                            <div class='field -payment'><%= student.user.agreement.payment %></div>
                            <div class='field -thirdPartyList'><%= student.user.agreement.thirdPartyList %></div>
                            
                            <div class='field -created'><%= formatDate(student.created) %></div>
                            <div class='field -schoolSignRep'><%= student.user.agreement.schoolSignRep %></div>
    
                            <!-- TUITION RESULTS -->
                            <% if(!student.tuition) { %>
                                <div class='field -tuition'>no data</div>
                            <% } else { %>
                                <% let tuitionLink = `/admin/user/${student.user._id}?activatetab=4&open=tuition` %>
                                <% if(!student.tuition.isAllowed) { %>
                                    <a href="<%= tuitionLink %>" class='field -tuition -tuitionDisabled'>disabled</a>
                                <% } else { %>
                                    <% let progress = `${ Math.round(student.tuition.avLessonsRate * 1000) / 10}%` %>
                                    <% if (student.tuition.avLessonsRate < 0.95) { %>
                                        <a href="<%= tuitionLink %>" class='field -tuition -tuitionProgress' style="--progress: <%= progress %>"><%= progress %></a>
                                    <% } else { %>
                                        <a href="<%= tuitionLink %>" class='field -tuition -tuitionDone'><%= progress %></a>
                                    <% } %>
                                <% } %>
                            <% } %>
    
                            <!-- Scoring -->
                            
                            <!-- link for get into payments directly -->
                            <% let scoringLink = `/admin/user/${student.user._id}?activatetab=4&open=scorings` %>
    
                            <% if(student.scoring) { %>
    
                                <% if(student.scoring.isAllowed) { %>
                                    <a href="<%= scoringLink %>" class='field -isAllowed'>
                                        <i class="fas fa-check"></i>
                                    </a>
                                <% } else { %>
                                    <a href="<%= scoringLink %>" class='field -isAllowed'>
                                        <i class="fas fa-ban"></i>
                                    </a>
                                <% } %>
    
                                <% let scorArr = [student.scoring.scoringsInCab, student.scoring.scoringsOutCab, student.scoring.scoringsBacking, student.scoring.scoringsCity] %>
                                <!-- scoring type classes here not for styling only BUT for socket.io work -->
                                <% let scorClasses = ['-scoringsInCab', '-scoringsOutCab', '-scoringsBacking', '-scoringsCity'] %>
                                
                                <% scorArr.map((scor, index) => { %>
                                    <!-- link to show the last done scoring of particulat type -->
                                    <% let GETLink = `/admin/inst/scoring-print?studentId=${student._id}&scoringType=${scorClasses[index]}&back=/admin/student/list` %>
                                    <% if(scor.length) { %>
                                        <% let lastScor = scor[scor.length - 1] %>
                                        <% let date = new Date(lastScor.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) %>
                                        <% let msg = lastScor.comment ? `[${date}] ${lastScor.instructor} says: ${lastScor.comment}` : `[${date}] ${lastScor.instructor}` %>
                                        <% let passedClass = lastScor.result ? '-scoringPassed' : '-scoringFailed' %>
                                        <div class='field -scoring'>
                                            <a href="<%= GETLink %>" title='<%= msg %>'>
                                                <i class="far fa-thumbs-up <%= scorClasses[index] %> <%= passedClass %>"></i>
                                            </a>
                                        </div>
                                    <% } else { %>
                                        <div class='field -scoring'>
                                            <a href="<%= GETLink %>">
                                                <i class="far fa-thumbs-up <%= scorClasses[index] %> -hidden"></i>
                                            </a>
                                        </div>
                                    <% } %>
                                <% }) %>
                            <% } else { %>
                                <div class='field -isAllowed'></div>
                                <!-- scoring type classes here not for styling only BUT for socket.io work -->
                                <div class='field -scoring'>
                                    <a href="/admin/inst/scoring-print?studentId=<%= student._id %>&scoringType=-scoringsInCab&back=/admin/student/list">
                                        <i class="far fa-thumbs-up -scoringsInCab -hidden"></i>
                                    </a>
                                </div>
                                <div class='field -scoring'>
                                    <a href="/admin/inst/scoring-print?studentId=<%= student._id %>&scoringType=-scoringsOutCab&back=/admin/student/list">
                                        <i class="far fa-thumbs-up -scoringsOutCab -hidden"></i>
                                    </a>
                                </div>
                                <div class='field -scoring'>
                                    <a href="/admin/inst/scoring-print?studentId=<%= student._id %>&scoringType=-scoringsBacking&back=/admin/student/list">
                                        <i class="far fa-thumbs-up -scoringsBacking -hidden"></i>
                                    </a>
                                </div>
                                <div class='field -scoring'>
                                    <a href="/admin/inst/scoring-print?studentId=<%= student._id %>&scoringType=-scoringsCity&back=/admin/student/list">
                                        <i class="far fa-thumbs-up -scoringsCity -hidden"></i>
                                    </a>
                                </div>
                            <% } %>
    
    
                        </div>  <!-- student-list-row -->
                    <% }) %>
                </section>  <!-- student-list-body -->

            </form>     <!-- bulk qr printing form -->

        <% } else { %>      <!-- students array is not OK -->
            <h1>Cannot retrieve data from database...</h1>
        <% } %>
    </div>      <!-- student-list-box -->




    <script>

        const usNumberFormat =  new Intl.NumberFormat('us-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })


        function toggleTheRestToo(qr) {
            // checks/unchecks also all fields needed for QR bulk printing
            const buddies = document.querySelectorAll(`[data-id='${qr.dataset.ids}']`)
            for (let i=0; i < buddies.length; i++) {
                buddies[i].checked = qr.checked
            }
        }


        document.getElementById('qrBulkPrintForm').addEventListener('submit', (e) => {
            // checks if at least one selected to be printed
            const chks = document.getElementsByName('qrsToPrint')
            let flagNoOneChecked = true
            
            for (let i=0; i < chks.length; i++) {
                if (chks[i].checked) {
                    flagNoOneChecked = false
                    break
                }
            }

            if (flagNoOneChecked) {
                e.preventDefault()
                alert('This button for QRs bulk printing. To use select at least one and try again.')
            }
        })


        // toggles fixed headers to change color when position 'sticky' works
        // array of fixed elements
        const fixedHeaders = [
           document.getElementsByClassName('-fixed1')[0],
           document.getElementsByClassName('-fixed2')[0],
           document.getElementsByClassName('-fixed3')[0],
           document.getElementsByClassName('-fixed4')[0],
           document.getElementsByClassName('-fixed5')[0]
        ]
    
        // listener on SCROLL adds/removes class 'isSticky'
        window.addEventListener('scroll', (e) => {
            if(fixedHeaders[2].getBoundingClientRect().left < 290) {
                fixedHeaders.map(fixed => { fixed.classList.add('isSticky') })
            } else {
                fixedHeaders.map(fixed => { fixed.classList.remove('isSticky') })
            }
        })



        function reCalcTotal(id) {
            const updatedRow = document.querySelector(`[data-agreement='${id}']`)
            const costItems = ['-tuitionCost', '-regisrFee', '-supplyFee', '-otherFee']
            
            let result = 0
            if (updatedRow) {
                costItems.map(item => {
                    result += parseFloat(updatedRow.getElementsByClassName(item)[0].dataset.amount)
                })
            }
            return usNumberFormat.format(result)
        }

    </script>


    <script type="module" defer>

        // @NOTIFICATIONS from db
        import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js"
        const socket = io("/")

        // indicator to react when db updates
        const lighthouse = document.getElementsByClassName('lighthouse')[0]
        
        function indicateChanges(animation) {
            const tyOfAnimation = animation ? animation : '-jump'
            lighthouse.classList.add(tyOfAnimation)
            setTimeout(()=>{
                lighthouse.classList.remove(tyOfAnimation)
            }, 2500)
        }


        // server emits, so have to check if changes are related to this particular client
        // @WHEN Students changed
        socket.on('students-update', student => {
            if (student) {
                const id = student.documentKey._id
                if (student.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-student='${id}']`)
                    if (updatedRow != null) {
                        const fields = student.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'TTT':
                                        el.textContent = `${ Math.round(value) }'`
                                    break
                                    case 'created':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break
                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if student is defined
        })  // socket.on('students-update')


        // @WHEN dataCollection Forms changed
        socket.on('dataCollections-update', data => {
            if (data) {
                const id = data.documentKey._id
                if (data.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-dataColl='${id}']`)
                    if (updatedRow != null) {
                        const fields = data.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'DOB':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break
                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if data is defined
        })  // socket.on('dataCollections-update')


        // @WHEN dataCollection Forms changed
        socket.on('agreements-update', data => {
            if (data) {
                const id = data.documentKey._id
                if (data.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-agreement='${id}']`)
                    if (updatedRow != null) {
                        const fields = data.updateDescription.updatedFields
                        indicateChanges()   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.getElementsByClassName(`-${key}`)[0]
                            if (el) {
                                switch (key) {
                                    case 'downPayment':
                                    case 'monthlyPayment':
                                    case 'loanPayment':
                                        el.textContent = usNumberFormat.format(value)
                                    break
                                    
                                    case 'tuitionCost':
                                    case 'regisrFee':
                                    case 'supplyFee':
                                    case 'otherFee':
                                        el.textContent = usNumberFormat.format(value)
                                        el.dataset.amount = value
                                        updatedRow.getElementsByClassName(`-totalCost`)[0].textContent = reCalcTotal(id)
                                    break

                                    case 'updatedDate':
                                    case 'schoolSignDate':
                                        el.textContent = value ? new Date(value).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' }) : '-'
                                    break

                                    default: el.textContent = value
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if data is defined
        })  // socket.on('dataCollections-update')

        // @WHEN Tuition is changed
        socket.on('tuition-update', lesson => {
            if (lesson) {
                const id = lesson.documentKey._id
                if (lesson.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-tuition='${id}']`)
                    if (updatedRow != null) {
                        const fields = lesson.updateDescription.updatedFields
                        if (fields.avLessonsRate) {     // fires only when avLessonsRate is changed
                            indicateChanges('-flip')   //  show reaction on changes
                            const el = updatedRow.getElementsByClassName('-tuition')[0]
                            if (el) { el.textContent = `${Math.round(fields.avLessonsRate * 1000) / 10}%` }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if student is defined
        })  // socket.on('students-update')


        // @WHEN scoring changed
        socket.on('scoring-update', data => {
            if (data) {
                const id = data.documentKey._id
                if (data.operationType === "update") {
                    const updatedRow = document.querySelector(`[data-scoring='${id}']`)
                    if (updatedRow != null) {
                        const fields = data.updateDescription.updatedFields
                        indicateChanges('-roll')   //  show reaction on changes
                        for (const [key, value] of Object.entries(fields)) {
                            let el = updatedRow.querySelector(`.-${key}`)
                            if (el) {
                                switch (key) {
                                    case 'isAllowed':
                                        el.textContent = value ? "Yes" : "No"
                                    break

                                    case 'scoringsInCab':
                                    case 'scoringsOutCab':
                                    case 'scoringsBacking':
                                    case 'scoringsCity':
                                        // arrays of scorings
                                        if (!value.length) {    // scoring is deleted
                                            el.classList.add('-hidden')
                                            el.classList.remove('-scoringPassed')
                                            el.classList.remove('-scoringFailed')
                                        } else {    // added or updated
                                            let lastScor = value[value.length - 1]
                                            let date = new Date(lastScor.created).toLocaleDateString('en-US', { timeZone: 'America/Los_Angeles' })
                                            el.title = lastScor.comment ? `[${date}] ${lastScor.instructor} says: ${lastScor.comment}` : `[${date}] ${lastScor.instructor}`
                                            el.classList.remove('-hidden')
                                            
                                            if (lastScor.result) {
                                                el.classList.add('-scoringPassed')
                                                el.classList.remove('-scoringFailed')
                                            } else {
                                                el.classList.add('-scoringFailed')
                                                el.classList.remove('-scoringPassed')
                                            }
                                        }
                                    break
                                }
                            }
                        }
                    }   // updatedRow != null
                }   // operation is update
            }   // if data is defined
        })  // socket.on('scoring-update')

    </script>


    <!-- working with filter -->
    <script>
        // socket.io assigned only with operationType, so rows qty is constant
        const rows = document.querySelectorAll('.student-list-row')
        const lastNames = document.querySelectorAll('.-lastName')
        const firstNames = document.querySelectorAll('.-firstName')
        const middleNames = document.querySelectorAll('.-middleName')


        function filterColumn(input) {
            if (!input) { return }
            const filter = input.value.toLowerCase()
            if (!rows || !lastNames || !firstNames || !middleNames) { return }
            if (rows.length < 2) { return }
            for (let i=1; i<rows.length; i++) {
                
                let toShow = lastNames[i].textContent.toLowerCase().includes(filter)
                || firstNames[i].textContent.toLowerCase().includes(filter)
                || middleNames[i].textContent.toLowerCase().includes(filter)
                
                rows[i].classList.toggle('-hidden', !toShow)
                rows[i].classList.toggle('-visible', toShow && filter)
            }
        }


        // reload Student List for Location or Enrollment status
        function reloadStudentListWithQuery(location, enrollmentStatus, a) {
            if (!location || !enrollmentStatus || !a) { return }
            a.setAttribute('href', `/admin/student/list?location=${location.value}&graduate=${enrollmentStatus.value}`)
            a.click()
        }

    </script>

</body>
</html>
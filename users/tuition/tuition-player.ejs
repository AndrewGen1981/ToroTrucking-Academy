<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TTA Player</title>

  <link rel="shortcut icon" href="../../static/images/thumb.png">
    
  <!-- Styles -->
  <link rel="stylesheet" href="../../static/css/fonts.css">
  <link rel="stylesheet" href="../../static/css/brix-family.css">

  <link rel="stylesheet" href="../../static/css/colors.css">

  <link rel="stylesheet" href="/users/tuition/tuition.css">

</head>
<body>

  <!-- TITLES -->
  <div class="title-box">
    <% if (videoData) { %>
      <h1><%= videoData.lessonTitle %></h1>
      <h2><%= videoData.lesson %></h2>
      <% if (videoData.videoProgress) { %>
        <span>Progress on this lesson is <%= Math.round(parseFloat(videoData.videoProgress)*1000) / 10 %>%</span>
        <% if (parseFloat(videoData.testProgress)) { %>
          <span>Quiz done</span>
        <% } else {%>
          <span>Quiz is not passed</span>
        <% } %>
      <% } %>
    <% } %>
  </div>

  <!-- PLAYER -->
  <div class="player-and-tools">
    <div class="player-box" onclick=ytPlayerClick(this)>
      <div id="player"></div>
    </div>
    <div class="tools-box">
      <input type="range" min="0" max="100" name="volume" oninput="volumeChanged(this)">
      <select name="playbackQuality" id="playbackQuality" data-status='empty'></select>
    </div>  <!-- tools-box -->
    <form action="/user/tuition/update" method="POST"></form>
  </div>  <!-- player-and-tools -->

  <!-- TEST -->
  <div class="test-box">
    <% if (videoData) { %>
      <% videoData.questions.map(question => { %>
        <h3><%= question.question %></h3>
        <% question.answers.map((answer, index) => { %>

          <label for="Q<%= question.id %>A<%= index %>" data-answer='<%= answer %>'>
            <input type="radio" name="Q<%= question.id %>" id="Q<%= question.id %>A<%= index %>" />
            <%= answer %>
          </label>

        <% }) %>

      <% }) %>
    <% } %>
    <button class="submitQuizze" onclick="submitQuizze()">Submit Quizze</button>
    <div class="quizzeResult"></div>
  </div>


  <script>


    const playbackQuality = document.getElementById('playbackQuality')
    function addQualityOptions(item) {
      const option = document.createElement('option')
      option.value = item
      option.textContent = item
      playbackQuality.appendChild(option)
    }


    // playback info object
    const lesson = {
      userId: '<%= user._id %>',
      videoId: '<%= video %>',

      updateTimer: undefined,
      fetchTimer: undefined,

      duration: 0,
      currentTime: 0,
      
      currRatio: 0,
      prevRatio: 0,

      quiz: 0
    }

    function updateOnServer() {
      fetch('/user/tuition/update', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: lesson.userId,
          videoId: lesson.videoId,
          lesson: "<%= videoData.lesson %>",
          lessonTitle: "<%= videoData.lessonTitle %>",
          currentRatio: Math.round(lesson.currRatio * 10000) / 10000,
          currentTime: lesson.currentTime,
          testProgress: lesson.quiz
        })
      })
    }


    const tag = document.createElement('script')
    tag.src = "https://www.youtube.com/iframe_api"

    const firstScriptTag = document.getElementsByTagName('script')[0]
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag)
   
    let player;

    const playerOptions = {
      videoId: '<%= video %>',
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      },
      playerVars: {
        autoplay: 1,
        controls: 0,
        disablekb: 1,
        fs: 0,
        iv_load_policy: 3,
        modestbranding: 1,
        playsinline: 1,
        rel: 0,
        showinfo: 0,
        start: 0    //   here last viewed second can be start from
      }
    }


    function onYouTubeIframeAPIReady() {    //  loads YT-Player with options when ready
      player = new YT.Player('player', playerOptions)
    }


    function onPlayerReady(event) {
      
      event.target.setPlaybackRate(1)   // sets normal view speed
      event.target.playVideo()
      
      document.querySelector('[name="volume"]').value = player.getVolume()  // set a volume like user has already

      lesson.duration = event.target.getDuration()  // saving videoDuration
      if (lesson.duration === 0) { lesson.duration = 0.001 }  // cannot be 0, because of dividing

      
      // setting up listeners
      lesson.updateTimer = setInterval(() => {    // recalculate RATIO each second
        lesson.currentTime = event.target.getCurrentTime()
        lesson.currRatio = lesson.currentTime / lesson.duration
      }, 1000)

      lesson.fetchTimer = setInterval(() => {    // fetch to SERVER each 5 seconds
        lesson.currentTime = event.target.getCurrentTime()
        if (lesson.currRatio != lesson.prevRatio) {   // video not paused
          lesson.prevRatio = lesson.currRatio
          
          updateOnServer()
        }
      }, 5000)

    }


    function onPlayerStateChange(event) {
      if (event.data  == YT.PlayerState.PLAYING) {
        // setting up playbackQuality
        if (playbackQuality) {
          if (playbackQuality.dataset.status === 'empty') {
            const modes = event.target.getAvailableQualityLevels()
            const defaulMode = event.target.getPlaybackQuality()
            if (defaulMode != 'unknown') {
              addQualityOptions(defaulMode)
              modes.map(mode => {
                if (mode != defaulMode) {
                  addQualityOptions(mode)
                }
              })
              playbackQuality.addEventListener('change', (e) => {
                if (player) { player.setPlaybackQuality(e.target.value) }
              })
              playbackQuality.dataset.status = 'filled-out'
            }
          }
        }
      }
    }

    
    function stopVideo() {
      player.stopVideo()
    }


    // OWN functions
    function ytPlayerClick(playerBox) {
      if (player.getPlayerState()  == YT.PlayerState.PLAYING) {
        player.pauseVideo()
        playerBox.classList.add('-paused-state')
      } else {
        player.playVideo()
        playerBox.classList.remove('-paused-state')
      }
    }

    function volumeChanged(volumeInput) {
      player.setVolume(volumeInput.value)
    }



    // Quizze
    function submitQuizze() {
      let correct = true  // assume all correct
      let ifAnswered      // for check if aswer is given
      let studentAnswer   // for each input

      '<% videoData.questions.map((question, Q) => { %>'
        ifAnswered = false
        '<% question.answers.map((answer, A) => { %>'
          studentAnswer = document.getElementById('Q<%= Q %>A<%= A %>')
          if (studentAnswer) {
            if (studentAnswer.checked) {
              correct = correct ? studentAnswer.parentElement.dataset.answer === '<%= question.correctAnswer %>' : false
              studentAnswer.parentElement.classList.remove(studentAnswer.parentElement.dataset.answer != '<%= question.correctAnswer %>')
              studentAnswer.parentElement.classList.add(studentAnswer.parentElement.dataset.answer === '<%= question.correctAnswer %>')
              ifAnswered = true
            }
          }
        '<% }) %>'
        correct = correct && ifAnswered
      '<% }) %>'

      if (correct) {
        // save Quizze result
        document.querySelector('.quizzeResult').textContent = "Congratulation!!! Your result has been saved"
        lesson.quiz = Math.round(lesson.currRatio * 10000) / 10000    // saving current ratio when quiz done
        updateOnServer()
      } else {
        document.querySelector('.quizzeResult').textContent = "You've missed somewhere"
      }

    }


  </script>

</body>
</html>



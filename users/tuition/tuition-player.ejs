<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TTA Player</title>

  <style>
    body, html {
      width: 50vw;
      height: 50vh;
    }
    :root {
      --player-box-width: 50vw;
      --player-box-height: calc(var(--player-box-width)*0.5625);

      --player-width: var(--player-box-width);
      --player-height: calc(var(--player-width)*1.1);
      --player-mt: calc((var(--player-box-height) - var(--player-height)) / 2);
    }
    .player-box {
      width: var(--player-box-width);
      height: var(--player-box-height);
      overflow-y: hidden;
    }
    #player {
      width: var(--player-width);
      height: var(--player-height);
      margin-top: var(--player-mt);
    }
  </style>

</head>
<body>

    <% if (videoData) { %>
      <h1><%= videoData.lesson %></h1>
      <h2><%= videoData.lessonTitle %></h2>
    <% } %>

    <div class="player-box">
      <div id="player"></div>
    </div>

    <% if (videoData) { %>
      <% videoData.questions.map(question => { %>
        <h3><%= question.question %></h3>
        <% question.answers.map((answer, index) => { %>

          <label for="Q<%= question.id %>A<%= index %>">
            <input type="radio" name="Q<%= question.id %>" id="Q<%= question.id %>A<%= index %>" />
            <%= answer %>
          </label>

        <% }) %>

      <% }) %>
    <% } %>
    

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          // width: '100%',
          // height: '100%',
          videoId: '<%= video %>',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          // setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>

</body>
</html>


